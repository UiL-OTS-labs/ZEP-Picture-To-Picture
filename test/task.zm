/******************************************************************************\
FILE:           task.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Implementation of task: Visual Lexical Decision
See readme.txt for more information.


Global structure of this experiment phase:

  - instructions

  - practice part
      trial

  - pause

  - test part
      trial


HISTORY:
2011-10-25 TV   Created.

\******************************************************************************/

//requires 1.14;
plugin zep_file;

import defs;
import stimuli;
import shuffle;
import output;
import test_page;


Block task
{
    on_event:entry()
    {
        if(open_button_box() != OK)
        {
            println("Could not open button box!");
        }
    }

    int open_button_box()
    {
        int index = 0;
        while(index < BEEXY_BOX_PORT_ADDRESS_CANDIDATES.size)
        {
            string address = BEEXY_BOX_PORT_ADDRESS_CANDIDATES[index];
            if(file_exists(address))
            {
                control.button_box.open(address);
                if(control.button_box.is_open)
                {
                    println("Managed to open button box on " + address);
                    return OK;
                }
            }
            index = index + 1;
        }

        return ERROR;
    }

    Part instructions
    {
        on_event:entry()
        {
//            pause_page.set_text_size(1000, 600);
            pause_page.set_text(
                "<b>Dear participant,</b>\n"
                "\n"
                "Thank you for participating in this experiment.\n"
                "\n"
                "You are now going to see words on the screen, one after the "
                "other. Your task is to indicate for each word as quickly as "
                "possible whether you think the word is <i>a real word or "
                "not</i>. Try to make no mistakes.\n"
                "\n"

                "To respond, hit the left button on the button-box for "
                "<i>No</i> and the right button for <i>Yes</i>.\n"

//                "To respond, hit the left shift key for <i>No</i> and the "
//                "right shift key for <i>Yes</i>.\n"

//                "To respond, hit the left button on the button-box for "
//                "<i>No</i> and the right button for <i>Yes</i>. "
//                "Alternatively you can use the left or right shift keys.\n"

                "\n"
                "First we will do a short practice.\n"
                "\n"
//                "<i>Hit Enter when ready to start.</i>",
                "<i>Hit any button on the button-box when ready to start.</i>",
                true);

            pause_page.action(this);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }


    Block practice
    {
        TestItem        item;   // current item


        on_event:entry()
        {
            num_cycles = prac_items.size;

            // Prepare test page: progress bar, feedback and prompt enabled.
            test_page.setup(num_cycles, false, false);
        }


        on_event:exit()
        {
            test_page.cleanup();
        }

        Trial trial
        {
            on_event:entry()
            {
                item = prac_items[practice.cycle];

                test_page.action(this, item, reference_time, practice.cycle);
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }


    Part pause
    {
        on_event:entry()
        {
            pause_page.set_text(
                "End of the practice part.\n"
                "\n"
                "If you have any questions at this moment please ask the "
                "experimenter now.\n"
                "\n"
//                "<i>Hit Enter when ready to proceed.</i>",
                "<i>Hit any button on the button-box when ready to "
                "proceed.</i>",
                true);

            pause_page.action(this);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }


    Block test
    {
        TestItem        item;   // current item


        on_event:entry()
        {
            // Randomize test items table.
            if (shuffle_test_items() != OK) terminate;

            num_cycles = test_items.size;
//            num_cycles = 3;

            // Prepare test page: progress bar enabled, feedback and prompt
            // disabled.
            test_page.setup(num_cycles, false, false);
        }


        on_event:exit()
        {
            test_page.cleanup();

            // Save test output table as CSV file.
            test_output_save();
        }


        Trial trial
        {
            on_event:entry()
            {
                item = test_items[test.cycle];

                test_page.action(this, item, reference_time, test.cycle);
            }


            on_event:exit()
            {
                // Add new row to test output table.
                TestOutput output;
                output.trialnum = test.cycle + 1;
                output.id = item.id;
                output.stimuli_target_image_filename = item.target_image_filename;
                output.stimuli_answer1_image_filename = item.answer1_image_filename;
                output.stimuli_answer2_image_filename = item.answer2_image_filename;

                output.answer_image_filename = test_page.response.value;
                output.rt = test_page.response.rt;
                test_output_append(output);
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }
}


void action(Part caller)
{
    // Activate the task. When the task is done, the registered caller
    // (c.q. the main experiment object) will automatically be signalled.
    task.enter(caller);
}
